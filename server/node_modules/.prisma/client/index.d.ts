
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model BTreeNode
 * 
 */
export type BTreeNode = $Result.DefaultSelection<Prisma.$BTreeNodePayload>
/**
 * Model BTreeKey
 * 
 */
export type BTreeKey = $Result.DefaultSelection<Prisma.$BTreeKeyPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BTreeNodes
 * const bTreeNodes = await prisma.bTreeNode.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BTreeNodes
   * const bTreeNodes = await prisma.bTreeNode.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.bTreeNode`: Exposes CRUD operations for the **BTreeNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BTreeNodes
    * const bTreeNodes = await prisma.bTreeNode.findMany()
    * ```
    */
  get bTreeNode(): Prisma.BTreeNodeDelegate<ExtArgs>;

  /**
   * `prisma.bTreeKey`: Exposes CRUD operations for the **BTreeKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BTreeKeys
    * const bTreeKeys = await prisma.bTreeKey.findMany()
    * ```
    */
  get bTreeKey(): Prisma.BTreeKeyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BTreeNode: 'BTreeNode',
    BTreeKey: 'BTreeKey'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "bTreeNode" | "bTreeKey"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      BTreeNode: {
        payload: Prisma.$BTreeNodePayload<ExtArgs>
        fields: Prisma.BTreeNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BTreeNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BTreeNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>
          }
          findFirst: {
            args: Prisma.BTreeNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BTreeNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>
          }
          findMany: {
            args: Prisma.BTreeNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>[]
          }
          create: {
            args: Prisma.BTreeNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>
          }
          createMany: {
            args: Prisma.BTreeNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BTreeNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>[]
          }
          delete: {
            args: Prisma.BTreeNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>
          }
          update: {
            args: Prisma.BTreeNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>
          }
          deleteMany: {
            args: Prisma.BTreeNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BTreeNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BTreeNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeNodePayload>
          }
          aggregate: {
            args: Prisma.BTreeNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBTreeNode>
          }
          groupBy: {
            args: Prisma.BTreeNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BTreeNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BTreeNodeCountArgs<ExtArgs>
            result: $Utils.Optional<BTreeNodeCountAggregateOutputType> | number
          }
        }
      }
      BTreeKey: {
        payload: Prisma.$BTreeKeyPayload<ExtArgs>
        fields: Prisma.BTreeKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BTreeKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BTreeKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>
          }
          findFirst: {
            args: Prisma.BTreeKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BTreeKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>
          }
          findMany: {
            args: Prisma.BTreeKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>[]
          }
          create: {
            args: Prisma.BTreeKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>
          }
          createMany: {
            args: Prisma.BTreeKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BTreeKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>[]
          }
          delete: {
            args: Prisma.BTreeKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>
          }
          update: {
            args: Prisma.BTreeKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>
          }
          deleteMany: {
            args: Prisma.BTreeKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BTreeKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BTreeKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BTreeKeyPayload>
          }
          aggregate: {
            args: Prisma.BTreeKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBTreeKey>
          }
          groupBy: {
            args: Prisma.BTreeKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<BTreeKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.BTreeKeyCountArgs<ExtArgs>
            result: $Utils.Optional<BTreeKeyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BTreeNodeCountOutputType
   */

  export type BTreeNodeCountOutputType = {
    children: number
    keys: number
  }

  export type BTreeNodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | BTreeNodeCountOutputTypeCountChildrenArgs
    keys?: boolean | BTreeNodeCountOutputTypeCountKeysArgs
  }

  // Custom InputTypes
  /**
   * BTreeNodeCountOutputType without action
   */
  export type BTreeNodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNodeCountOutputType
     */
    select?: BTreeNodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BTreeNodeCountOutputType without action
   */
  export type BTreeNodeCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BTreeNodeWhereInput
  }

  /**
   * BTreeNodeCountOutputType without action
   */
  export type BTreeNodeCountOutputTypeCountKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BTreeKeyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model BTreeNode
   */

  export type AggregateBTreeNode = {
    _count: BTreeNodeCountAggregateOutputType | null
    _avg: BTreeNodeAvgAggregateOutputType | null
    _sum: BTreeNodeSumAggregateOutputType | null
    _min: BTreeNodeMinAggregateOutputType | null
    _max: BTreeNodeMaxAggregateOutputType | null
  }

  export type BTreeNodeAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
    t: number | null
  }

  export type BTreeNodeSumAggregateOutputType = {
    id: number | null
    parentId: number | null
    t: number | null
  }

  export type BTreeNodeMinAggregateOutputType = {
    id: number | null
    isLeaf: boolean | null
    parentId: number | null
    t: number | null
    root: boolean | null
  }

  export type BTreeNodeMaxAggregateOutputType = {
    id: number | null
    isLeaf: boolean | null
    parentId: number | null
    t: number | null
    root: boolean | null
  }

  export type BTreeNodeCountAggregateOutputType = {
    id: number
    isLeaf: number
    parentId: number
    t: number
    root: number
    _all: number
  }


  export type BTreeNodeAvgAggregateInputType = {
    id?: true
    parentId?: true
    t?: true
  }

  export type BTreeNodeSumAggregateInputType = {
    id?: true
    parentId?: true
    t?: true
  }

  export type BTreeNodeMinAggregateInputType = {
    id?: true
    isLeaf?: true
    parentId?: true
    t?: true
    root?: true
  }

  export type BTreeNodeMaxAggregateInputType = {
    id?: true
    isLeaf?: true
    parentId?: true
    t?: true
    root?: true
  }

  export type BTreeNodeCountAggregateInputType = {
    id?: true
    isLeaf?: true
    parentId?: true
    t?: true
    root?: true
    _all?: true
  }

  export type BTreeNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BTreeNode to aggregate.
     */
    where?: BTreeNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeNodes to fetch.
     */
    orderBy?: BTreeNodeOrderByWithRelationInput | BTreeNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BTreeNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BTreeNodes
    **/
    _count?: true | BTreeNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BTreeNodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BTreeNodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BTreeNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BTreeNodeMaxAggregateInputType
  }

  export type GetBTreeNodeAggregateType<T extends BTreeNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateBTreeNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBTreeNode[P]>
      : GetScalarType<T[P], AggregateBTreeNode[P]>
  }




  export type BTreeNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BTreeNodeWhereInput
    orderBy?: BTreeNodeOrderByWithAggregationInput | BTreeNodeOrderByWithAggregationInput[]
    by: BTreeNodeScalarFieldEnum[] | BTreeNodeScalarFieldEnum
    having?: BTreeNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BTreeNodeCountAggregateInputType | true
    _avg?: BTreeNodeAvgAggregateInputType
    _sum?: BTreeNodeSumAggregateInputType
    _min?: BTreeNodeMinAggregateInputType
    _max?: BTreeNodeMaxAggregateInputType
  }

  export type BTreeNodeGroupByOutputType = {
    id: number
    isLeaf: boolean
    parentId: number | null
    t: number
    root: boolean
    _count: BTreeNodeCountAggregateOutputType | null
    _avg: BTreeNodeAvgAggregateOutputType | null
    _sum: BTreeNodeSumAggregateOutputType | null
    _min: BTreeNodeMinAggregateOutputType | null
    _max: BTreeNodeMaxAggregateOutputType | null
  }

  type GetBTreeNodeGroupByPayload<T extends BTreeNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BTreeNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BTreeNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BTreeNodeGroupByOutputType[P]>
            : GetScalarType<T[P], BTreeNodeGroupByOutputType[P]>
        }
      >
    >


  export type BTreeNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isLeaf?: boolean
    parentId?: boolean
    t?: boolean
    root?: boolean
    parent?: boolean | BTreeNode$parentArgs<ExtArgs>
    children?: boolean | BTreeNode$childrenArgs<ExtArgs>
    keys?: boolean | BTreeNode$keysArgs<ExtArgs>
    _count?: boolean | BTreeNodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bTreeNode"]>

  export type BTreeNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isLeaf?: boolean
    parentId?: boolean
    t?: boolean
    root?: boolean
    parent?: boolean | BTreeNode$parentArgs<ExtArgs>
  }, ExtArgs["result"]["bTreeNode"]>

  export type BTreeNodeSelectScalar = {
    id?: boolean
    isLeaf?: boolean
    parentId?: boolean
    t?: boolean
    root?: boolean
  }

  export type BTreeNodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | BTreeNode$parentArgs<ExtArgs>
    children?: boolean | BTreeNode$childrenArgs<ExtArgs>
    keys?: boolean | BTreeNode$keysArgs<ExtArgs>
    _count?: boolean | BTreeNodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BTreeNodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | BTreeNode$parentArgs<ExtArgs>
  }

  export type $BTreeNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BTreeNode"
    objects: {
      parent: Prisma.$BTreeNodePayload<ExtArgs> | null
      children: Prisma.$BTreeNodePayload<ExtArgs>[]
      keys: Prisma.$BTreeKeyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      isLeaf: boolean
      parentId: number | null
      t: number
      root: boolean
    }, ExtArgs["result"]["bTreeNode"]>
    composites: {}
  }

  type BTreeNodeGetPayload<S extends boolean | null | undefined | BTreeNodeDefaultArgs> = $Result.GetResult<Prisma.$BTreeNodePayload, S>

  type BTreeNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BTreeNodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BTreeNodeCountAggregateInputType | true
    }

  export interface BTreeNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BTreeNode'], meta: { name: 'BTreeNode' } }
    /**
     * Find zero or one BTreeNode that matches the filter.
     * @param {BTreeNodeFindUniqueArgs} args - Arguments to find a BTreeNode
     * @example
     * // Get one BTreeNode
     * const bTreeNode = await prisma.bTreeNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BTreeNodeFindUniqueArgs>(args: SelectSubset<T, BTreeNodeFindUniqueArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BTreeNode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BTreeNodeFindUniqueOrThrowArgs} args - Arguments to find a BTreeNode
     * @example
     * // Get one BTreeNode
     * const bTreeNode = await prisma.bTreeNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BTreeNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, BTreeNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BTreeNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeFindFirstArgs} args - Arguments to find a BTreeNode
     * @example
     * // Get one BTreeNode
     * const bTreeNode = await prisma.bTreeNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BTreeNodeFindFirstArgs>(args?: SelectSubset<T, BTreeNodeFindFirstArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BTreeNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeFindFirstOrThrowArgs} args - Arguments to find a BTreeNode
     * @example
     * // Get one BTreeNode
     * const bTreeNode = await prisma.bTreeNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BTreeNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, BTreeNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BTreeNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BTreeNodes
     * const bTreeNodes = await prisma.bTreeNode.findMany()
     * 
     * // Get first 10 BTreeNodes
     * const bTreeNodes = await prisma.bTreeNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bTreeNodeWithIdOnly = await prisma.bTreeNode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BTreeNodeFindManyArgs>(args?: SelectSubset<T, BTreeNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BTreeNode.
     * @param {BTreeNodeCreateArgs} args - Arguments to create a BTreeNode.
     * @example
     * // Create one BTreeNode
     * const BTreeNode = await prisma.bTreeNode.create({
     *   data: {
     *     // ... data to create a BTreeNode
     *   }
     * })
     * 
     */
    create<T extends BTreeNodeCreateArgs>(args: SelectSubset<T, BTreeNodeCreateArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BTreeNodes.
     * @param {BTreeNodeCreateManyArgs} args - Arguments to create many BTreeNodes.
     * @example
     * // Create many BTreeNodes
     * const bTreeNode = await prisma.bTreeNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BTreeNodeCreateManyArgs>(args?: SelectSubset<T, BTreeNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BTreeNodes and returns the data saved in the database.
     * @param {BTreeNodeCreateManyAndReturnArgs} args - Arguments to create many BTreeNodes.
     * @example
     * // Create many BTreeNodes
     * const bTreeNode = await prisma.bTreeNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BTreeNodes and only return the `id`
     * const bTreeNodeWithIdOnly = await prisma.bTreeNode.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BTreeNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, BTreeNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BTreeNode.
     * @param {BTreeNodeDeleteArgs} args - Arguments to delete one BTreeNode.
     * @example
     * // Delete one BTreeNode
     * const BTreeNode = await prisma.bTreeNode.delete({
     *   where: {
     *     // ... filter to delete one BTreeNode
     *   }
     * })
     * 
     */
    delete<T extends BTreeNodeDeleteArgs>(args: SelectSubset<T, BTreeNodeDeleteArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BTreeNode.
     * @param {BTreeNodeUpdateArgs} args - Arguments to update one BTreeNode.
     * @example
     * // Update one BTreeNode
     * const bTreeNode = await prisma.bTreeNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BTreeNodeUpdateArgs>(args: SelectSubset<T, BTreeNodeUpdateArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BTreeNodes.
     * @param {BTreeNodeDeleteManyArgs} args - Arguments to filter BTreeNodes to delete.
     * @example
     * // Delete a few BTreeNodes
     * const { count } = await prisma.bTreeNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BTreeNodeDeleteManyArgs>(args?: SelectSubset<T, BTreeNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BTreeNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BTreeNodes
     * const bTreeNode = await prisma.bTreeNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BTreeNodeUpdateManyArgs>(args: SelectSubset<T, BTreeNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BTreeNode.
     * @param {BTreeNodeUpsertArgs} args - Arguments to update or create a BTreeNode.
     * @example
     * // Update or create a BTreeNode
     * const bTreeNode = await prisma.bTreeNode.upsert({
     *   create: {
     *     // ... data to create a BTreeNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BTreeNode we want to update
     *   }
     * })
     */
    upsert<T extends BTreeNodeUpsertArgs>(args: SelectSubset<T, BTreeNodeUpsertArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BTreeNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeCountArgs} args - Arguments to filter BTreeNodes to count.
     * @example
     * // Count the number of BTreeNodes
     * const count = await prisma.bTreeNode.count({
     *   where: {
     *     // ... the filter for the BTreeNodes we want to count
     *   }
     * })
    **/
    count<T extends BTreeNodeCountArgs>(
      args?: Subset<T, BTreeNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BTreeNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BTreeNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BTreeNodeAggregateArgs>(args: Subset<T, BTreeNodeAggregateArgs>): Prisma.PrismaPromise<GetBTreeNodeAggregateType<T>>

    /**
     * Group by BTreeNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BTreeNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BTreeNodeGroupByArgs['orderBy'] }
        : { orderBy?: BTreeNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BTreeNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBTreeNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BTreeNode model
   */
  readonly fields: BTreeNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BTreeNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BTreeNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends BTreeNode$parentArgs<ExtArgs> = {}>(args?: Subset<T, BTreeNode$parentArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends BTreeNode$childrenArgs<ExtArgs> = {}>(args?: Subset<T, BTreeNode$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findMany"> | Null>
    keys<T extends BTreeNode$keysArgs<ExtArgs> = {}>(args?: Subset<T, BTreeNode$keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BTreeNode model
   */ 
  interface BTreeNodeFieldRefs {
    readonly id: FieldRef<"BTreeNode", 'Int'>
    readonly isLeaf: FieldRef<"BTreeNode", 'Boolean'>
    readonly parentId: FieldRef<"BTreeNode", 'Int'>
    readonly t: FieldRef<"BTreeNode", 'Int'>
    readonly root: FieldRef<"BTreeNode", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * BTreeNode findUnique
   */
  export type BTreeNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * Filter, which BTreeNode to fetch.
     */
    where: BTreeNodeWhereUniqueInput
  }

  /**
   * BTreeNode findUniqueOrThrow
   */
  export type BTreeNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * Filter, which BTreeNode to fetch.
     */
    where: BTreeNodeWhereUniqueInput
  }

  /**
   * BTreeNode findFirst
   */
  export type BTreeNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * Filter, which BTreeNode to fetch.
     */
    where?: BTreeNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeNodes to fetch.
     */
    orderBy?: BTreeNodeOrderByWithRelationInput | BTreeNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BTreeNodes.
     */
    cursor?: BTreeNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BTreeNodes.
     */
    distinct?: BTreeNodeScalarFieldEnum | BTreeNodeScalarFieldEnum[]
  }

  /**
   * BTreeNode findFirstOrThrow
   */
  export type BTreeNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * Filter, which BTreeNode to fetch.
     */
    where?: BTreeNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeNodes to fetch.
     */
    orderBy?: BTreeNodeOrderByWithRelationInput | BTreeNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BTreeNodes.
     */
    cursor?: BTreeNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BTreeNodes.
     */
    distinct?: BTreeNodeScalarFieldEnum | BTreeNodeScalarFieldEnum[]
  }

  /**
   * BTreeNode findMany
   */
  export type BTreeNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * Filter, which BTreeNodes to fetch.
     */
    where?: BTreeNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeNodes to fetch.
     */
    orderBy?: BTreeNodeOrderByWithRelationInput | BTreeNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BTreeNodes.
     */
    cursor?: BTreeNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeNodes.
     */
    skip?: number
    distinct?: BTreeNodeScalarFieldEnum | BTreeNodeScalarFieldEnum[]
  }

  /**
   * BTreeNode create
   */
  export type BTreeNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * The data needed to create a BTreeNode.
     */
    data: XOR<BTreeNodeCreateInput, BTreeNodeUncheckedCreateInput>
  }

  /**
   * BTreeNode createMany
   */
  export type BTreeNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BTreeNodes.
     */
    data: BTreeNodeCreateManyInput | BTreeNodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BTreeNode createManyAndReturn
   */
  export type BTreeNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BTreeNodes.
     */
    data: BTreeNodeCreateManyInput | BTreeNodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BTreeNode update
   */
  export type BTreeNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * The data needed to update a BTreeNode.
     */
    data: XOR<BTreeNodeUpdateInput, BTreeNodeUncheckedUpdateInput>
    /**
     * Choose, which BTreeNode to update.
     */
    where: BTreeNodeWhereUniqueInput
  }

  /**
   * BTreeNode updateMany
   */
  export type BTreeNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BTreeNodes.
     */
    data: XOR<BTreeNodeUpdateManyMutationInput, BTreeNodeUncheckedUpdateManyInput>
    /**
     * Filter which BTreeNodes to update
     */
    where?: BTreeNodeWhereInput
  }

  /**
   * BTreeNode upsert
   */
  export type BTreeNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * The filter to search for the BTreeNode to update in case it exists.
     */
    where: BTreeNodeWhereUniqueInput
    /**
     * In case the BTreeNode found by the `where` argument doesn't exist, create a new BTreeNode with this data.
     */
    create: XOR<BTreeNodeCreateInput, BTreeNodeUncheckedCreateInput>
    /**
     * In case the BTreeNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BTreeNodeUpdateInput, BTreeNodeUncheckedUpdateInput>
  }

  /**
   * BTreeNode delete
   */
  export type BTreeNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    /**
     * Filter which BTreeNode to delete.
     */
    where: BTreeNodeWhereUniqueInput
  }

  /**
   * BTreeNode deleteMany
   */
  export type BTreeNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BTreeNodes to delete
     */
    where?: BTreeNodeWhereInput
  }

  /**
   * BTreeNode.parent
   */
  export type BTreeNode$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    where?: BTreeNodeWhereInput
  }

  /**
   * BTreeNode.children
   */
  export type BTreeNode$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
    where?: BTreeNodeWhereInput
    orderBy?: BTreeNodeOrderByWithRelationInput | BTreeNodeOrderByWithRelationInput[]
    cursor?: BTreeNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BTreeNodeScalarFieldEnum | BTreeNodeScalarFieldEnum[]
  }

  /**
   * BTreeNode.keys
   */
  export type BTreeNode$keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    where?: BTreeKeyWhereInput
    orderBy?: BTreeKeyOrderByWithRelationInput | BTreeKeyOrderByWithRelationInput[]
    cursor?: BTreeKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BTreeKeyScalarFieldEnum | BTreeKeyScalarFieldEnum[]
  }

  /**
   * BTreeNode without action
   */
  export type BTreeNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeNode
     */
    select?: BTreeNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeNodeInclude<ExtArgs> | null
  }


  /**
   * Model BTreeKey
   */

  export type AggregateBTreeKey = {
    _count: BTreeKeyCountAggregateOutputType | null
    _avg: BTreeKeyAvgAggregateOutputType | null
    _sum: BTreeKeySumAggregateOutputType | null
    _min: BTreeKeyMinAggregateOutputType | null
    _max: BTreeKeyMaxAggregateOutputType | null
  }

  export type BTreeKeyAvgAggregateOutputType = {
    id: number | null
    key: number | null
    nodeId: number | null
  }

  export type BTreeKeySumAggregateOutputType = {
    id: number | null
    key: number | null
    nodeId: number | null
  }

  export type BTreeKeyMinAggregateOutputType = {
    id: number | null
    key: number | null
    value: string | null
    nodeId: number | null
  }

  export type BTreeKeyMaxAggregateOutputType = {
    id: number | null
    key: number | null
    value: string | null
    nodeId: number | null
  }

  export type BTreeKeyCountAggregateOutputType = {
    id: number
    key: number
    value: number
    nodeId: number
    _all: number
  }


  export type BTreeKeyAvgAggregateInputType = {
    id?: true
    key?: true
    nodeId?: true
  }

  export type BTreeKeySumAggregateInputType = {
    id?: true
    key?: true
    nodeId?: true
  }

  export type BTreeKeyMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    nodeId?: true
  }

  export type BTreeKeyMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    nodeId?: true
  }

  export type BTreeKeyCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    nodeId?: true
    _all?: true
  }

  export type BTreeKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BTreeKey to aggregate.
     */
    where?: BTreeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeKeys to fetch.
     */
    orderBy?: BTreeKeyOrderByWithRelationInput | BTreeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BTreeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BTreeKeys
    **/
    _count?: true | BTreeKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BTreeKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BTreeKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BTreeKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BTreeKeyMaxAggregateInputType
  }

  export type GetBTreeKeyAggregateType<T extends BTreeKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateBTreeKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBTreeKey[P]>
      : GetScalarType<T[P], AggregateBTreeKey[P]>
  }




  export type BTreeKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BTreeKeyWhereInput
    orderBy?: BTreeKeyOrderByWithAggregationInput | BTreeKeyOrderByWithAggregationInput[]
    by: BTreeKeyScalarFieldEnum[] | BTreeKeyScalarFieldEnum
    having?: BTreeKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BTreeKeyCountAggregateInputType | true
    _avg?: BTreeKeyAvgAggregateInputType
    _sum?: BTreeKeySumAggregateInputType
    _min?: BTreeKeyMinAggregateInputType
    _max?: BTreeKeyMaxAggregateInputType
  }

  export type BTreeKeyGroupByOutputType = {
    id: number
    key: number
    value: string
    nodeId: number
    _count: BTreeKeyCountAggregateOutputType | null
    _avg: BTreeKeyAvgAggregateOutputType | null
    _sum: BTreeKeySumAggregateOutputType | null
    _min: BTreeKeyMinAggregateOutputType | null
    _max: BTreeKeyMaxAggregateOutputType | null
  }

  type GetBTreeKeyGroupByPayload<T extends BTreeKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BTreeKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BTreeKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BTreeKeyGroupByOutputType[P]>
            : GetScalarType<T[P], BTreeKeyGroupByOutputType[P]>
        }
      >
    >


  export type BTreeKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    nodeId?: boolean
    node?: boolean | BTreeNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bTreeKey"]>

  export type BTreeKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    nodeId?: boolean
    node?: boolean | BTreeNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bTreeKey"]>

  export type BTreeKeySelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    nodeId?: boolean
  }

  export type BTreeKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | BTreeNodeDefaultArgs<ExtArgs>
  }
  export type BTreeKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | BTreeNodeDefaultArgs<ExtArgs>
  }

  export type $BTreeKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BTreeKey"
    objects: {
      node: Prisma.$BTreeNodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: number
      value: string
      nodeId: number
    }, ExtArgs["result"]["bTreeKey"]>
    composites: {}
  }

  type BTreeKeyGetPayload<S extends boolean | null | undefined | BTreeKeyDefaultArgs> = $Result.GetResult<Prisma.$BTreeKeyPayload, S>

  type BTreeKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BTreeKeyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BTreeKeyCountAggregateInputType | true
    }

  export interface BTreeKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BTreeKey'], meta: { name: 'BTreeKey' } }
    /**
     * Find zero or one BTreeKey that matches the filter.
     * @param {BTreeKeyFindUniqueArgs} args - Arguments to find a BTreeKey
     * @example
     * // Get one BTreeKey
     * const bTreeKey = await prisma.bTreeKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BTreeKeyFindUniqueArgs>(args: SelectSubset<T, BTreeKeyFindUniqueArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BTreeKey that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BTreeKeyFindUniqueOrThrowArgs} args - Arguments to find a BTreeKey
     * @example
     * // Get one BTreeKey
     * const bTreeKey = await prisma.bTreeKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BTreeKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, BTreeKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BTreeKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyFindFirstArgs} args - Arguments to find a BTreeKey
     * @example
     * // Get one BTreeKey
     * const bTreeKey = await prisma.bTreeKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BTreeKeyFindFirstArgs>(args?: SelectSubset<T, BTreeKeyFindFirstArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BTreeKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyFindFirstOrThrowArgs} args - Arguments to find a BTreeKey
     * @example
     * // Get one BTreeKey
     * const bTreeKey = await prisma.bTreeKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BTreeKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, BTreeKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BTreeKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BTreeKeys
     * const bTreeKeys = await prisma.bTreeKey.findMany()
     * 
     * // Get first 10 BTreeKeys
     * const bTreeKeys = await prisma.bTreeKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bTreeKeyWithIdOnly = await prisma.bTreeKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BTreeKeyFindManyArgs>(args?: SelectSubset<T, BTreeKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BTreeKey.
     * @param {BTreeKeyCreateArgs} args - Arguments to create a BTreeKey.
     * @example
     * // Create one BTreeKey
     * const BTreeKey = await prisma.bTreeKey.create({
     *   data: {
     *     // ... data to create a BTreeKey
     *   }
     * })
     * 
     */
    create<T extends BTreeKeyCreateArgs>(args: SelectSubset<T, BTreeKeyCreateArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BTreeKeys.
     * @param {BTreeKeyCreateManyArgs} args - Arguments to create many BTreeKeys.
     * @example
     * // Create many BTreeKeys
     * const bTreeKey = await prisma.bTreeKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BTreeKeyCreateManyArgs>(args?: SelectSubset<T, BTreeKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BTreeKeys and returns the data saved in the database.
     * @param {BTreeKeyCreateManyAndReturnArgs} args - Arguments to create many BTreeKeys.
     * @example
     * // Create many BTreeKeys
     * const bTreeKey = await prisma.bTreeKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BTreeKeys and only return the `id`
     * const bTreeKeyWithIdOnly = await prisma.bTreeKey.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BTreeKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, BTreeKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BTreeKey.
     * @param {BTreeKeyDeleteArgs} args - Arguments to delete one BTreeKey.
     * @example
     * // Delete one BTreeKey
     * const BTreeKey = await prisma.bTreeKey.delete({
     *   where: {
     *     // ... filter to delete one BTreeKey
     *   }
     * })
     * 
     */
    delete<T extends BTreeKeyDeleteArgs>(args: SelectSubset<T, BTreeKeyDeleteArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BTreeKey.
     * @param {BTreeKeyUpdateArgs} args - Arguments to update one BTreeKey.
     * @example
     * // Update one BTreeKey
     * const bTreeKey = await prisma.bTreeKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BTreeKeyUpdateArgs>(args: SelectSubset<T, BTreeKeyUpdateArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BTreeKeys.
     * @param {BTreeKeyDeleteManyArgs} args - Arguments to filter BTreeKeys to delete.
     * @example
     * // Delete a few BTreeKeys
     * const { count } = await prisma.bTreeKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BTreeKeyDeleteManyArgs>(args?: SelectSubset<T, BTreeKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BTreeKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BTreeKeys
     * const bTreeKey = await prisma.bTreeKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BTreeKeyUpdateManyArgs>(args: SelectSubset<T, BTreeKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BTreeKey.
     * @param {BTreeKeyUpsertArgs} args - Arguments to update or create a BTreeKey.
     * @example
     * // Update or create a BTreeKey
     * const bTreeKey = await prisma.bTreeKey.upsert({
     *   create: {
     *     // ... data to create a BTreeKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BTreeKey we want to update
     *   }
     * })
     */
    upsert<T extends BTreeKeyUpsertArgs>(args: SelectSubset<T, BTreeKeyUpsertArgs<ExtArgs>>): Prisma__BTreeKeyClient<$Result.GetResult<Prisma.$BTreeKeyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BTreeKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyCountArgs} args - Arguments to filter BTreeKeys to count.
     * @example
     * // Count the number of BTreeKeys
     * const count = await prisma.bTreeKey.count({
     *   where: {
     *     // ... the filter for the BTreeKeys we want to count
     *   }
     * })
    **/
    count<T extends BTreeKeyCountArgs>(
      args?: Subset<T, BTreeKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BTreeKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BTreeKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BTreeKeyAggregateArgs>(args: Subset<T, BTreeKeyAggregateArgs>): Prisma.PrismaPromise<GetBTreeKeyAggregateType<T>>

    /**
     * Group by BTreeKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTreeKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BTreeKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BTreeKeyGroupByArgs['orderBy'] }
        : { orderBy?: BTreeKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BTreeKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBTreeKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BTreeKey model
   */
  readonly fields: BTreeKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BTreeKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BTreeKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    node<T extends BTreeNodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BTreeNodeDefaultArgs<ExtArgs>>): Prisma__BTreeNodeClient<$Result.GetResult<Prisma.$BTreeNodePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BTreeKey model
   */ 
  interface BTreeKeyFieldRefs {
    readonly id: FieldRef<"BTreeKey", 'Int'>
    readonly key: FieldRef<"BTreeKey", 'Int'>
    readonly value: FieldRef<"BTreeKey", 'String'>
    readonly nodeId: FieldRef<"BTreeKey", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BTreeKey findUnique
   */
  export type BTreeKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * Filter, which BTreeKey to fetch.
     */
    where: BTreeKeyWhereUniqueInput
  }

  /**
   * BTreeKey findUniqueOrThrow
   */
  export type BTreeKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * Filter, which BTreeKey to fetch.
     */
    where: BTreeKeyWhereUniqueInput
  }

  /**
   * BTreeKey findFirst
   */
  export type BTreeKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * Filter, which BTreeKey to fetch.
     */
    where?: BTreeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeKeys to fetch.
     */
    orderBy?: BTreeKeyOrderByWithRelationInput | BTreeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BTreeKeys.
     */
    cursor?: BTreeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BTreeKeys.
     */
    distinct?: BTreeKeyScalarFieldEnum | BTreeKeyScalarFieldEnum[]
  }

  /**
   * BTreeKey findFirstOrThrow
   */
  export type BTreeKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * Filter, which BTreeKey to fetch.
     */
    where?: BTreeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeKeys to fetch.
     */
    orderBy?: BTreeKeyOrderByWithRelationInput | BTreeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BTreeKeys.
     */
    cursor?: BTreeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BTreeKeys.
     */
    distinct?: BTreeKeyScalarFieldEnum | BTreeKeyScalarFieldEnum[]
  }

  /**
   * BTreeKey findMany
   */
  export type BTreeKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * Filter, which BTreeKeys to fetch.
     */
    where?: BTreeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTreeKeys to fetch.
     */
    orderBy?: BTreeKeyOrderByWithRelationInput | BTreeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BTreeKeys.
     */
    cursor?: BTreeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTreeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTreeKeys.
     */
    skip?: number
    distinct?: BTreeKeyScalarFieldEnum | BTreeKeyScalarFieldEnum[]
  }

  /**
   * BTreeKey create
   */
  export type BTreeKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a BTreeKey.
     */
    data: XOR<BTreeKeyCreateInput, BTreeKeyUncheckedCreateInput>
  }

  /**
   * BTreeKey createMany
   */
  export type BTreeKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BTreeKeys.
     */
    data: BTreeKeyCreateManyInput | BTreeKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BTreeKey createManyAndReturn
   */
  export type BTreeKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BTreeKeys.
     */
    data: BTreeKeyCreateManyInput | BTreeKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BTreeKey update
   */
  export type BTreeKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a BTreeKey.
     */
    data: XOR<BTreeKeyUpdateInput, BTreeKeyUncheckedUpdateInput>
    /**
     * Choose, which BTreeKey to update.
     */
    where: BTreeKeyWhereUniqueInput
  }

  /**
   * BTreeKey updateMany
   */
  export type BTreeKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BTreeKeys.
     */
    data: XOR<BTreeKeyUpdateManyMutationInput, BTreeKeyUncheckedUpdateManyInput>
    /**
     * Filter which BTreeKeys to update
     */
    where?: BTreeKeyWhereInput
  }

  /**
   * BTreeKey upsert
   */
  export type BTreeKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the BTreeKey to update in case it exists.
     */
    where: BTreeKeyWhereUniqueInput
    /**
     * In case the BTreeKey found by the `where` argument doesn't exist, create a new BTreeKey with this data.
     */
    create: XOR<BTreeKeyCreateInput, BTreeKeyUncheckedCreateInput>
    /**
     * In case the BTreeKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BTreeKeyUpdateInput, BTreeKeyUncheckedUpdateInput>
  }

  /**
   * BTreeKey delete
   */
  export type BTreeKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
    /**
     * Filter which BTreeKey to delete.
     */
    where: BTreeKeyWhereUniqueInput
  }

  /**
   * BTreeKey deleteMany
   */
  export type BTreeKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BTreeKeys to delete
     */
    where?: BTreeKeyWhereInput
  }

  /**
   * BTreeKey without action
   */
  export type BTreeKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BTreeKey
     */
    select?: BTreeKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BTreeKeyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BTreeNodeScalarFieldEnum: {
    id: 'id',
    isLeaf: 'isLeaf',
    parentId: 'parentId',
    t: 't',
    root: 'root'
  };

  export type BTreeNodeScalarFieldEnum = (typeof BTreeNodeScalarFieldEnum)[keyof typeof BTreeNodeScalarFieldEnum]


  export const BTreeKeyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    nodeId: 'nodeId'
  };

  export type BTreeKeyScalarFieldEnum = (typeof BTreeKeyScalarFieldEnum)[keyof typeof BTreeKeyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type BTreeNodeWhereInput = {
    AND?: BTreeNodeWhereInput | BTreeNodeWhereInput[]
    OR?: BTreeNodeWhereInput[]
    NOT?: BTreeNodeWhereInput | BTreeNodeWhereInput[]
    id?: IntFilter<"BTreeNode"> | number
    isLeaf?: BoolFilter<"BTreeNode"> | boolean
    parentId?: IntNullableFilter<"BTreeNode"> | number | null
    t?: IntFilter<"BTreeNode"> | number
    root?: BoolFilter<"BTreeNode"> | boolean
    parent?: XOR<BTreeNodeNullableRelationFilter, BTreeNodeWhereInput> | null
    children?: BTreeNodeListRelationFilter
    keys?: BTreeKeyListRelationFilter
  }

  export type BTreeNodeOrderByWithRelationInput = {
    id?: SortOrder
    isLeaf?: SortOrder
    parentId?: SortOrderInput | SortOrder
    t?: SortOrder
    root?: SortOrder
    parent?: BTreeNodeOrderByWithRelationInput
    children?: BTreeNodeOrderByRelationAggregateInput
    keys?: BTreeKeyOrderByRelationAggregateInput
  }

  export type BTreeNodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BTreeNodeWhereInput | BTreeNodeWhereInput[]
    OR?: BTreeNodeWhereInput[]
    NOT?: BTreeNodeWhereInput | BTreeNodeWhereInput[]
    isLeaf?: BoolFilter<"BTreeNode"> | boolean
    parentId?: IntNullableFilter<"BTreeNode"> | number | null
    t?: IntFilter<"BTreeNode"> | number
    root?: BoolFilter<"BTreeNode"> | boolean
    parent?: XOR<BTreeNodeNullableRelationFilter, BTreeNodeWhereInput> | null
    children?: BTreeNodeListRelationFilter
    keys?: BTreeKeyListRelationFilter
  }, "id">

  export type BTreeNodeOrderByWithAggregationInput = {
    id?: SortOrder
    isLeaf?: SortOrder
    parentId?: SortOrderInput | SortOrder
    t?: SortOrder
    root?: SortOrder
    _count?: BTreeNodeCountOrderByAggregateInput
    _avg?: BTreeNodeAvgOrderByAggregateInput
    _max?: BTreeNodeMaxOrderByAggregateInput
    _min?: BTreeNodeMinOrderByAggregateInput
    _sum?: BTreeNodeSumOrderByAggregateInput
  }

  export type BTreeNodeScalarWhereWithAggregatesInput = {
    AND?: BTreeNodeScalarWhereWithAggregatesInput | BTreeNodeScalarWhereWithAggregatesInput[]
    OR?: BTreeNodeScalarWhereWithAggregatesInput[]
    NOT?: BTreeNodeScalarWhereWithAggregatesInput | BTreeNodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BTreeNode"> | number
    isLeaf?: BoolWithAggregatesFilter<"BTreeNode"> | boolean
    parentId?: IntNullableWithAggregatesFilter<"BTreeNode"> | number | null
    t?: IntWithAggregatesFilter<"BTreeNode"> | number
    root?: BoolWithAggregatesFilter<"BTreeNode"> | boolean
  }

  export type BTreeKeyWhereInput = {
    AND?: BTreeKeyWhereInput | BTreeKeyWhereInput[]
    OR?: BTreeKeyWhereInput[]
    NOT?: BTreeKeyWhereInput | BTreeKeyWhereInput[]
    id?: IntFilter<"BTreeKey"> | number
    key?: IntFilter<"BTreeKey"> | number
    value?: StringFilter<"BTreeKey"> | string
    nodeId?: IntFilter<"BTreeKey"> | number
    node?: XOR<BTreeNodeRelationFilter, BTreeNodeWhereInput>
  }

  export type BTreeKeyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    nodeId?: SortOrder
    node?: BTreeNodeOrderByWithRelationInput
  }

  export type BTreeKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BTreeKeyWhereInput | BTreeKeyWhereInput[]
    OR?: BTreeKeyWhereInput[]
    NOT?: BTreeKeyWhereInput | BTreeKeyWhereInput[]
    key?: IntFilter<"BTreeKey"> | number
    value?: StringFilter<"BTreeKey"> | string
    nodeId?: IntFilter<"BTreeKey"> | number
    node?: XOR<BTreeNodeRelationFilter, BTreeNodeWhereInput>
  }, "id">

  export type BTreeKeyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    nodeId?: SortOrder
    _count?: BTreeKeyCountOrderByAggregateInput
    _avg?: BTreeKeyAvgOrderByAggregateInput
    _max?: BTreeKeyMaxOrderByAggregateInput
    _min?: BTreeKeyMinOrderByAggregateInput
    _sum?: BTreeKeySumOrderByAggregateInput
  }

  export type BTreeKeyScalarWhereWithAggregatesInput = {
    AND?: BTreeKeyScalarWhereWithAggregatesInput | BTreeKeyScalarWhereWithAggregatesInput[]
    OR?: BTreeKeyScalarWhereWithAggregatesInput[]
    NOT?: BTreeKeyScalarWhereWithAggregatesInput | BTreeKeyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BTreeKey"> | number
    key?: IntWithAggregatesFilter<"BTreeKey"> | number
    value?: StringWithAggregatesFilter<"BTreeKey"> | string
    nodeId?: IntWithAggregatesFilter<"BTreeKey"> | number
  }

  export type BTreeNodeCreateInput = {
    isLeaf: boolean
    t?: number
    root?: boolean
    parent?: BTreeNodeCreateNestedOneWithoutChildrenInput
    children?: BTreeNodeCreateNestedManyWithoutParentInput
    keys?: BTreeKeyCreateNestedManyWithoutNodeInput
  }

  export type BTreeNodeUncheckedCreateInput = {
    id?: number
    isLeaf: boolean
    parentId?: number | null
    t?: number
    root?: boolean
    children?: BTreeNodeUncheckedCreateNestedManyWithoutParentInput
    keys?: BTreeKeyUncheckedCreateNestedManyWithoutNodeInput
  }

  export type BTreeNodeUpdateInput = {
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    parent?: BTreeNodeUpdateOneWithoutChildrenNestedInput
    children?: BTreeNodeUpdateManyWithoutParentNestedInput
    keys?: BTreeKeyUpdateManyWithoutNodeNestedInput
  }

  export type BTreeNodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    children?: BTreeNodeUncheckedUpdateManyWithoutParentNestedInput
    keys?: BTreeKeyUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type BTreeNodeCreateManyInput = {
    id?: number
    isLeaf: boolean
    parentId?: number | null
    t?: number
    root?: boolean
  }

  export type BTreeNodeUpdateManyMutationInput = {
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BTreeNodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BTreeKeyCreateInput = {
    key: number
    value: string
    node: BTreeNodeCreateNestedOneWithoutKeysInput
  }

  export type BTreeKeyUncheckedCreateInput = {
    id?: number
    key: number
    value: string
    nodeId: number
  }

  export type BTreeKeyUpdateInput = {
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    node?: BTreeNodeUpdateOneRequiredWithoutKeysNestedInput
  }

  export type BTreeKeyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    nodeId?: IntFieldUpdateOperationsInput | number
  }

  export type BTreeKeyCreateManyInput = {
    id?: number
    key: number
    value: string
    nodeId: number
  }

  export type BTreeKeyUpdateManyMutationInput = {
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type BTreeKeyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    nodeId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BTreeNodeNullableRelationFilter = {
    is?: BTreeNodeWhereInput | null
    isNot?: BTreeNodeWhereInput | null
  }

  export type BTreeNodeListRelationFilter = {
    every?: BTreeNodeWhereInput
    some?: BTreeNodeWhereInput
    none?: BTreeNodeWhereInput
  }

  export type BTreeKeyListRelationFilter = {
    every?: BTreeKeyWhereInput
    some?: BTreeKeyWhereInput
    none?: BTreeKeyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BTreeNodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BTreeKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BTreeNodeCountOrderByAggregateInput = {
    id?: SortOrder
    isLeaf?: SortOrder
    parentId?: SortOrder
    t?: SortOrder
    root?: SortOrder
  }

  export type BTreeNodeAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    t?: SortOrder
  }

  export type BTreeNodeMaxOrderByAggregateInput = {
    id?: SortOrder
    isLeaf?: SortOrder
    parentId?: SortOrder
    t?: SortOrder
    root?: SortOrder
  }

  export type BTreeNodeMinOrderByAggregateInput = {
    id?: SortOrder
    isLeaf?: SortOrder
    parentId?: SortOrder
    t?: SortOrder
    root?: SortOrder
  }

  export type BTreeNodeSumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    t?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BTreeNodeRelationFilter = {
    is?: BTreeNodeWhereInput
    isNot?: BTreeNodeWhereInput
  }

  export type BTreeKeyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    nodeId?: SortOrder
  }

  export type BTreeKeyAvgOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    nodeId?: SortOrder
  }

  export type BTreeKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    nodeId?: SortOrder
  }

  export type BTreeKeyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    nodeId?: SortOrder
  }

  export type BTreeKeySumOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    nodeId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BTreeNodeCreateNestedOneWithoutChildrenInput = {
    create?: XOR<BTreeNodeCreateWithoutChildrenInput, BTreeNodeUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutChildrenInput
    connect?: BTreeNodeWhereUniqueInput
  }

  export type BTreeNodeCreateNestedManyWithoutParentInput = {
    create?: XOR<BTreeNodeCreateWithoutParentInput, BTreeNodeUncheckedCreateWithoutParentInput> | BTreeNodeCreateWithoutParentInput[] | BTreeNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutParentInput | BTreeNodeCreateOrConnectWithoutParentInput[]
    createMany?: BTreeNodeCreateManyParentInputEnvelope
    connect?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
  }

  export type BTreeKeyCreateNestedManyWithoutNodeInput = {
    create?: XOR<BTreeKeyCreateWithoutNodeInput, BTreeKeyUncheckedCreateWithoutNodeInput> | BTreeKeyCreateWithoutNodeInput[] | BTreeKeyUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: BTreeKeyCreateOrConnectWithoutNodeInput | BTreeKeyCreateOrConnectWithoutNodeInput[]
    createMany?: BTreeKeyCreateManyNodeInputEnvelope
    connect?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
  }

  export type BTreeNodeUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<BTreeNodeCreateWithoutParentInput, BTreeNodeUncheckedCreateWithoutParentInput> | BTreeNodeCreateWithoutParentInput[] | BTreeNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutParentInput | BTreeNodeCreateOrConnectWithoutParentInput[]
    createMany?: BTreeNodeCreateManyParentInputEnvelope
    connect?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
  }

  export type BTreeKeyUncheckedCreateNestedManyWithoutNodeInput = {
    create?: XOR<BTreeKeyCreateWithoutNodeInput, BTreeKeyUncheckedCreateWithoutNodeInput> | BTreeKeyCreateWithoutNodeInput[] | BTreeKeyUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: BTreeKeyCreateOrConnectWithoutNodeInput | BTreeKeyCreateOrConnectWithoutNodeInput[]
    createMany?: BTreeKeyCreateManyNodeInputEnvelope
    connect?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BTreeNodeUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<BTreeNodeCreateWithoutChildrenInput, BTreeNodeUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutChildrenInput
    upsert?: BTreeNodeUpsertWithoutChildrenInput
    disconnect?: BTreeNodeWhereInput | boolean
    delete?: BTreeNodeWhereInput | boolean
    connect?: BTreeNodeWhereUniqueInput
    update?: XOR<XOR<BTreeNodeUpdateToOneWithWhereWithoutChildrenInput, BTreeNodeUpdateWithoutChildrenInput>, BTreeNodeUncheckedUpdateWithoutChildrenInput>
  }

  export type BTreeNodeUpdateManyWithoutParentNestedInput = {
    create?: XOR<BTreeNodeCreateWithoutParentInput, BTreeNodeUncheckedCreateWithoutParentInput> | BTreeNodeCreateWithoutParentInput[] | BTreeNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutParentInput | BTreeNodeCreateOrConnectWithoutParentInput[]
    upsert?: BTreeNodeUpsertWithWhereUniqueWithoutParentInput | BTreeNodeUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: BTreeNodeCreateManyParentInputEnvelope
    set?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    disconnect?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    delete?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    connect?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    update?: BTreeNodeUpdateWithWhereUniqueWithoutParentInput | BTreeNodeUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: BTreeNodeUpdateManyWithWhereWithoutParentInput | BTreeNodeUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: BTreeNodeScalarWhereInput | BTreeNodeScalarWhereInput[]
  }

  export type BTreeKeyUpdateManyWithoutNodeNestedInput = {
    create?: XOR<BTreeKeyCreateWithoutNodeInput, BTreeKeyUncheckedCreateWithoutNodeInput> | BTreeKeyCreateWithoutNodeInput[] | BTreeKeyUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: BTreeKeyCreateOrConnectWithoutNodeInput | BTreeKeyCreateOrConnectWithoutNodeInput[]
    upsert?: BTreeKeyUpsertWithWhereUniqueWithoutNodeInput | BTreeKeyUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: BTreeKeyCreateManyNodeInputEnvelope
    set?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    disconnect?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    delete?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    connect?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    update?: BTreeKeyUpdateWithWhereUniqueWithoutNodeInput | BTreeKeyUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: BTreeKeyUpdateManyWithWhereWithoutNodeInput | BTreeKeyUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: BTreeKeyScalarWhereInput | BTreeKeyScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BTreeNodeUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<BTreeNodeCreateWithoutParentInput, BTreeNodeUncheckedCreateWithoutParentInput> | BTreeNodeCreateWithoutParentInput[] | BTreeNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutParentInput | BTreeNodeCreateOrConnectWithoutParentInput[]
    upsert?: BTreeNodeUpsertWithWhereUniqueWithoutParentInput | BTreeNodeUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: BTreeNodeCreateManyParentInputEnvelope
    set?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    disconnect?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    delete?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    connect?: BTreeNodeWhereUniqueInput | BTreeNodeWhereUniqueInput[]
    update?: BTreeNodeUpdateWithWhereUniqueWithoutParentInput | BTreeNodeUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: BTreeNodeUpdateManyWithWhereWithoutParentInput | BTreeNodeUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: BTreeNodeScalarWhereInput | BTreeNodeScalarWhereInput[]
  }

  export type BTreeKeyUncheckedUpdateManyWithoutNodeNestedInput = {
    create?: XOR<BTreeKeyCreateWithoutNodeInput, BTreeKeyUncheckedCreateWithoutNodeInput> | BTreeKeyCreateWithoutNodeInput[] | BTreeKeyUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: BTreeKeyCreateOrConnectWithoutNodeInput | BTreeKeyCreateOrConnectWithoutNodeInput[]
    upsert?: BTreeKeyUpsertWithWhereUniqueWithoutNodeInput | BTreeKeyUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: BTreeKeyCreateManyNodeInputEnvelope
    set?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    disconnect?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    delete?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    connect?: BTreeKeyWhereUniqueInput | BTreeKeyWhereUniqueInput[]
    update?: BTreeKeyUpdateWithWhereUniqueWithoutNodeInput | BTreeKeyUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: BTreeKeyUpdateManyWithWhereWithoutNodeInput | BTreeKeyUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: BTreeKeyScalarWhereInput | BTreeKeyScalarWhereInput[]
  }

  export type BTreeNodeCreateNestedOneWithoutKeysInput = {
    create?: XOR<BTreeNodeCreateWithoutKeysInput, BTreeNodeUncheckedCreateWithoutKeysInput>
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutKeysInput
    connect?: BTreeNodeWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BTreeNodeUpdateOneRequiredWithoutKeysNestedInput = {
    create?: XOR<BTreeNodeCreateWithoutKeysInput, BTreeNodeUncheckedCreateWithoutKeysInput>
    connectOrCreate?: BTreeNodeCreateOrConnectWithoutKeysInput
    upsert?: BTreeNodeUpsertWithoutKeysInput
    connect?: BTreeNodeWhereUniqueInput
    update?: XOR<XOR<BTreeNodeUpdateToOneWithWhereWithoutKeysInput, BTreeNodeUpdateWithoutKeysInput>, BTreeNodeUncheckedUpdateWithoutKeysInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BTreeNodeCreateWithoutChildrenInput = {
    isLeaf: boolean
    t?: number
    root?: boolean
    parent?: BTreeNodeCreateNestedOneWithoutChildrenInput
    keys?: BTreeKeyCreateNestedManyWithoutNodeInput
  }

  export type BTreeNodeUncheckedCreateWithoutChildrenInput = {
    id?: number
    isLeaf: boolean
    parentId?: number | null
    t?: number
    root?: boolean
    keys?: BTreeKeyUncheckedCreateNestedManyWithoutNodeInput
  }

  export type BTreeNodeCreateOrConnectWithoutChildrenInput = {
    where: BTreeNodeWhereUniqueInput
    create: XOR<BTreeNodeCreateWithoutChildrenInput, BTreeNodeUncheckedCreateWithoutChildrenInput>
  }

  export type BTreeNodeCreateWithoutParentInput = {
    isLeaf: boolean
    t?: number
    root?: boolean
    children?: BTreeNodeCreateNestedManyWithoutParentInput
    keys?: BTreeKeyCreateNestedManyWithoutNodeInput
  }

  export type BTreeNodeUncheckedCreateWithoutParentInput = {
    id?: number
    isLeaf: boolean
    t?: number
    root?: boolean
    children?: BTreeNodeUncheckedCreateNestedManyWithoutParentInput
    keys?: BTreeKeyUncheckedCreateNestedManyWithoutNodeInput
  }

  export type BTreeNodeCreateOrConnectWithoutParentInput = {
    where: BTreeNodeWhereUniqueInput
    create: XOR<BTreeNodeCreateWithoutParentInput, BTreeNodeUncheckedCreateWithoutParentInput>
  }

  export type BTreeNodeCreateManyParentInputEnvelope = {
    data: BTreeNodeCreateManyParentInput | BTreeNodeCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type BTreeKeyCreateWithoutNodeInput = {
    key: number
    value: string
  }

  export type BTreeKeyUncheckedCreateWithoutNodeInput = {
    id?: number
    key: number
    value: string
  }

  export type BTreeKeyCreateOrConnectWithoutNodeInput = {
    where: BTreeKeyWhereUniqueInput
    create: XOR<BTreeKeyCreateWithoutNodeInput, BTreeKeyUncheckedCreateWithoutNodeInput>
  }

  export type BTreeKeyCreateManyNodeInputEnvelope = {
    data: BTreeKeyCreateManyNodeInput | BTreeKeyCreateManyNodeInput[]
    skipDuplicates?: boolean
  }

  export type BTreeNodeUpsertWithoutChildrenInput = {
    update: XOR<BTreeNodeUpdateWithoutChildrenInput, BTreeNodeUncheckedUpdateWithoutChildrenInput>
    create: XOR<BTreeNodeCreateWithoutChildrenInput, BTreeNodeUncheckedCreateWithoutChildrenInput>
    where?: BTreeNodeWhereInput
  }

  export type BTreeNodeUpdateToOneWithWhereWithoutChildrenInput = {
    where?: BTreeNodeWhereInput
    data: XOR<BTreeNodeUpdateWithoutChildrenInput, BTreeNodeUncheckedUpdateWithoutChildrenInput>
  }

  export type BTreeNodeUpdateWithoutChildrenInput = {
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    parent?: BTreeNodeUpdateOneWithoutChildrenNestedInput
    keys?: BTreeKeyUpdateManyWithoutNodeNestedInput
  }

  export type BTreeNodeUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    keys?: BTreeKeyUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type BTreeNodeUpsertWithWhereUniqueWithoutParentInput = {
    where: BTreeNodeWhereUniqueInput
    update: XOR<BTreeNodeUpdateWithoutParentInput, BTreeNodeUncheckedUpdateWithoutParentInput>
    create: XOR<BTreeNodeCreateWithoutParentInput, BTreeNodeUncheckedCreateWithoutParentInput>
  }

  export type BTreeNodeUpdateWithWhereUniqueWithoutParentInput = {
    where: BTreeNodeWhereUniqueInput
    data: XOR<BTreeNodeUpdateWithoutParentInput, BTreeNodeUncheckedUpdateWithoutParentInput>
  }

  export type BTreeNodeUpdateManyWithWhereWithoutParentInput = {
    where: BTreeNodeScalarWhereInput
    data: XOR<BTreeNodeUpdateManyMutationInput, BTreeNodeUncheckedUpdateManyWithoutParentInput>
  }

  export type BTreeNodeScalarWhereInput = {
    AND?: BTreeNodeScalarWhereInput | BTreeNodeScalarWhereInput[]
    OR?: BTreeNodeScalarWhereInput[]
    NOT?: BTreeNodeScalarWhereInput | BTreeNodeScalarWhereInput[]
    id?: IntFilter<"BTreeNode"> | number
    isLeaf?: BoolFilter<"BTreeNode"> | boolean
    parentId?: IntNullableFilter<"BTreeNode"> | number | null
    t?: IntFilter<"BTreeNode"> | number
    root?: BoolFilter<"BTreeNode"> | boolean
  }

  export type BTreeKeyUpsertWithWhereUniqueWithoutNodeInput = {
    where: BTreeKeyWhereUniqueInput
    update: XOR<BTreeKeyUpdateWithoutNodeInput, BTreeKeyUncheckedUpdateWithoutNodeInput>
    create: XOR<BTreeKeyCreateWithoutNodeInput, BTreeKeyUncheckedCreateWithoutNodeInput>
  }

  export type BTreeKeyUpdateWithWhereUniqueWithoutNodeInput = {
    where: BTreeKeyWhereUniqueInput
    data: XOR<BTreeKeyUpdateWithoutNodeInput, BTreeKeyUncheckedUpdateWithoutNodeInput>
  }

  export type BTreeKeyUpdateManyWithWhereWithoutNodeInput = {
    where: BTreeKeyScalarWhereInput
    data: XOR<BTreeKeyUpdateManyMutationInput, BTreeKeyUncheckedUpdateManyWithoutNodeInput>
  }

  export type BTreeKeyScalarWhereInput = {
    AND?: BTreeKeyScalarWhereInput | BTreeKeyScalarWhereInput[]
    OR?: BTreeKeyScalarWhereInput[]
    NOT?: BTreeKeyScalarWhereInput | BTreeKeyScalarWhereInput[]
    id?: IntFilter<"BTreeKey"> | number
    key?: IntFilter<"BTreeKey"> | number
    value?: StringFilter<"BTreeKey"> | string
    nodeId?: IntFilter<"BTreeKey"> | number
  }

  export type BTreeNodeCreateWithoutKeysInput = {
    isLeaf: boolean
    t?: number
    root?: boolean
    parent?: BTreeNodeCreateNestedOneWithoutChildrenInput
    children?: BTreeNodeCreateNestedManyWithoutParentInput
  }

  export type BTreeNodeUncheckedCreateWithoutKeysInput = {
    id?: number
    isLeaf: boolean
    parentId?: number | null
    t?: number
    root?: boolean
    children?: BTreeNodeUncheckedCreateNestedManyWithoutParentInput
  }

  export type BTreeNodeCreateOrConnectWithoutKeysInput = {
    where: BTreeNodeWhereUniqueInput
    create: XOR<BTreeNodeCreateWithoutKeysInput, BTreeNodeUncheckedCreateWithoutKeysInput>
  }

  export type BTreeNodeUpsertWithoutKeysInput = {
    update: XOR<BTreeNodeUpdateWithoutKeysInput, BTreeNodeUncheckedUpdateWithoutKeysInput>
    create: XOR<BTreeNodeCreateWithoutKeysInput, BTreeNodeUncheckedCreateWithoutKeysInput>
    where?: BTreeNodeWhereInput
  }

  export type BTreeNodeUpdateToOneWithWhereWithoutKeysInput = {
    where?: BTreeNodeWhereInput
    data: XOR<BTreeNodeUpdateWithoutKeysInput, BTreeNodeUncheckedUpdateWithoutKeysInput>
  }

  export type BTreeNodeUpdateWithoutKeysInput = {
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    parent?: BTreeNodeUpdateOneWithoutChildrenNestedInput
    children?: BTreeNodeUpdateManyWithoutParentNestedInput
  }

  export type BTreeNodeUncheckedUpdateWithoutKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    children?: BTreeNodeUncheckedUpdateManyWithoutParentNestedInput
  }

  export type BTreeNodeCreateManyParentInput = {
    id?: number
    isLeaf: boolean
    t?: number
    root?: boolean
  }

  export type BTreeKeyCreateManyNodeInput = {
    id?: number
    key: number
    value: string
  }

  export type BTreeNodeUpdateWithoutParentInput = {
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    children?: BTreeNodeUpdateManyWithoutParentNestedInput
    keys?: BTreeKeyUpdateManyWithoutNodeNestedInput
  }

  export type BTreeNodeUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
    children?: BTreeNodeUncheckedUpdateManyWithoutParentNestedInput
    keys?: BTreeKeyUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type BTreeNodeUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    t?: IntFieldUpdateOperationsInput | number
    root?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BTreeKeyUpdateWithoutNodeInput = {
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type BTreeKeyUncheckedUpdateWithoutNodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type BTreeKeyUncheckedUpdateManyWithoutNodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BTreeNodeCountOutputTypeDefaultArgs instead
     */
    export type BTreeNodeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BTreeNodeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BTreeNodeDefaultArgs instead
     */
    export type BTreeNodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BTreeNodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BTreeKeyDefaultArgs instead
     */
    export type BTreeKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BTreeKeyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}