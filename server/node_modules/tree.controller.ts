import { Request, Response, NextFunction } from 'express';
import TreeService from '../services/tree.service';
import { ApiError } from '../errors/apiError';

export default class TreeController{
    static async getData(req: Request, res: Response, next: NextFunction){
        try{
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return next(ApiError.BadRequestError('Error validating data', errors.array()));
            }
            const data = TreeService.getData();
        
            res.status(200).json({data});
        } catch(err){
            next(err);
        }
    }

    static async addRecord(req: Request, res: Response, next: NextFunction) {
        try {
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return next(ApiError.BadRequestError('Error validating data', errors.array()));
            }
            const { key, value } = req.body;
            await TreeService.addRecord(key, value);
            return res.status(200).json({ message: 'Record added successfully!' });
        } catch (err) {
            next(err);
        }
    }

    static async deleteRecord(req: Request, res: Response, next: NextFunction) {
        try {
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return next(ApiError.BadRequestError('Error validating data', errors.array()));
            }
            const { key } = req.body;
            await TreeService.deleteRecord(key);
            return res.status(200).json({ message: 'Record deleted successfully!' });
        } catch (err) {
            next(err);
        }
    }
    static async editRecord(req: Request, res: Response, next: NextFunction){
        try{
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return next(ApiError.BadRequestError('Error validating data', errors.array()));
            }
            const {key, newValue} = req.body;

            await TreeService.editRecord(key, newValue);

            res.status(200).json({message: 'Record edited successfully!'});
        } catch(err){
            next(err);
        }
    }
    
    static async binarySearch(req: Request, res: Response, next: NextFunction){
        try{
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return next(ApiError.BadRequestError('Error validating data', errors.array()));
            }
            const {key, nodeId} = req.body;

            const {found, value} = await TreeService.binarySearch(key, nodeId);

            if(!found){
                return ApiError.BadRequestError('Record not found!');
            }

            res.status(200).json({message: 'Record found successfully!'});
        } catch(err){
            next(err);
        }
    }
}